// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  student
  admin
  teacher
  parent
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

model User {
  id                      String    @id @default(uuid())
  name                    String
  email                   String    @unique
  emailVerified           Boolean   @default(false)
  image                   String?
  isPasswordResetRequired Boolean   @default(true)
  role                    UserRole  @default(student)
  banned                  Boolean   @default(false)
  banReason               String?
  banExpires              Int?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  sessions                Session[]
  accounts                Account[]

  student Student?
  teacher Teacher?
  parent  Parent?
}

model Session {
  id             String   @id @default(uuid())
  userId         String
  token          String   @unique
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(uuid())
  userId                String    @unique
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Student {
  id          String       @id @default(uuid())
  userId      String       @unique
  phone       String?      @unique
  address     String
  bloodType   String
  sex         UserSex
  parentId    String
  parent      Parent       @relation(fields: [parentId], references: [id], onDelete: Cascade)
  classId     String
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     String
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  birthday    DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
  @@map("student")
}

model Teacher {
  id        String    @id @default(uuid())
  userId    String    @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  birthday  DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("teacher")
}

model Parent {
  id        String    @id @default(uuid())
  userId    String    @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  students  Student[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("parent")
}

model Grade {
  id    String @id @default(uuid())
  level Int    @unique

  students  Student[]
  classes   Class[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Class {
  id            String         @id @default(uuid())
  name          String         @unique
  capacity      Int
  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id], onDelete: Cascade)
  lessons       Lesson[]
  students      Student[]
  gradeId       String
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Subject {
  id        String    @id @default(uuid())
  name      String    @unique
  teachers  Teacher[]
  lessons   Lesson[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Lesson {
  id        String   @id @default(uuid())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId   String
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     String
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Exam {
  id        String   @id @default(uuid())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  results   Result[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Assignment {
  id        String   @id @default(uuid())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  results   Result[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Result {
  id    String @id @default(uuid())
  score Int

  examId       String?
  exam         Exam?       @relation(fields: [examId], references: [id], onDelete: Cascade)
  assignmentId String?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Attendance {
  id      String   @id @default(uuid())
  date    DateTime
  present Boolean

  studentId String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId   String?
  class     Class?   @relation(fields: [classId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id          String   @id @default(uuid())
  title       String
  description String
  date        DateTime

  classId   String?
  class     Class?   @relation(fields: [classId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
